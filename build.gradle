plugins {
    //Compiles Java
    id 'java'
    //Adds an Executable Manifest
    id 'application'
    //Creates FatJars
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    //Builds docker images
    id 'com.palantir.docker' version '0.25.0'
}

mainClassName = "net.romvoid95.discord.CapCom"
def ver = new Version(major: 1, minor: 1, revision: 0)
version ver.toString()

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation ('net.dv8tion:JDA:4.2.0_225'){
        transitive = true
        exclude module: 'opus-java'
    }
    implementation group: 'com.jagrosh', name: 'jda-utilities', version: '3.0.5'
	implementation group: 'club.minnced', name: 'discord-webhooks', version: '0.5.4-rc'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.12.1'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.1'
	implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
	implementation group: 'org.apache.commons', name: 'commons-text', version: '1.9'
	
	implementation group: 'org.reflections', name: 'reflections', version: '0.9.12'
	
	compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.16'
	annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.16'
	
	testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.16'
	testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.16'
}

import org.apache.tools.ant.filters.ReplaceTokens

def gitRevision() {
	def gitVersion = new ByteArrayOutputStream()
	exec {
		commandLine("git", "rev-parse", "--short", "HEAD")
		standardOutput = gitVersion
	}

	return gitVersion.toString().trim()
}

task sourcesForRelease(type: Copy) {
	from ('src/main/java') {
		include '**/CapcomInfo.java'
		filter(ReplaceTokens, tokens: [
				version: ver.toString(),
				revision: gitRevision().toString()
		])
	}
	into 'build/filteredSrc'

	includeEmptyDirs = false
}

task generateJavaSources(type: SourceTask) {
	def javaSources = sourceSets.main.allJava.filter {
		it.name != 'CapcomInfo.java'
	}
	source = javaSources + sourcesForRelease.destinationDir

	dependsOn sourcesForRelease
}

compileJava {
	source = generateJavaSources.source
	classpath = sourceSets.main.compileClasspath

	dependsOn generateJavaSources
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.incremental = true
}

build.dependsOn shadowJar

shadowJar {
	archiveName = "CapComBot-" + project.version + ".jar"
    manifest {
        attributes(
                'Main-Class': mainClassName
        )
    }
}

class Version {
	String major, minor, revision

	String toString() {
		"${major}.${minor}.${revision}"
	}
}