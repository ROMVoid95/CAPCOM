plugins {
    //Compiles Java
    id 'java'
    //Adds an Executable Manifest
    id 'application'
    //Creates FatJars
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    //Builds docker images
    id 'com.palantir.docker' version '0.25.0'
}

mainClassName = "net.romvoid95.discord.CapcomBot"
def ver = new Version(major: 6, minor: 1, revision: 1)
version ver.toString()

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile ('net.dv8tion:JDA:4.2.0_225'){
        transitive = true
        exclude module: 'opus-java'
    }
	implementation 'ch.qos.logback:logback-classic:1.2.3'
	implementation 'com.google.guava:guava:30.1-jre'
	implementation 'org.apache.commons:commons-lang3:3.11'
	implementation 'org.apache.commons:commons-text:1.9'
	//Unit tests
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

def lint = [
	"auxiliaryclass",
	"cast",
	"classfile",
	"deprecation",
	"dep-ann",
	"divzero",
	"empty",
	"exports",
	"fallthrough",
	"finally",
	"module",
	"opens",
	"options",
	"overloads",
	"overrides",
	"path",
	"rawtypes",
	"removal",
	"requires-automatic",
	"requires-transitive-automatic",
	"serial",
	"static",
	"try",
	"unchecked",
	"varargs",
	"preview"
]

import org.apache.tools.ant.filters.ReplaceTokens

def gitRevision() {
	def gitVersion = new ByteArrayOutputStream()
	exec {
		commandLine("git", "rev-parse", "--short", "HEAD")
		standardOutput = gitVersion
	}

	return gitVersion.toString().trim()
}

task sourcesForRelease(type: Copy) {
	from ('src/main/java') {
		include '**/CapcomInfo.java'
		filter(ReplaceTokens, tokens: [
				version: ver.toString(),
				revision: gitRevision().toString()
		])
	}
	into 'build/filteredSrc'

	includeEmptyDirs = false
}

task generateJavaSources(type: SourceTask) {
	def javaSources = sourceSets.main.allJava.filter {
		it.name != 'CapcomInfo.java'
	}
	source = javaSources + sourcesForRelease.destinationDir

	dependsOn sourcesForRelease
}

compileJava {
	source = generateJavaSources.source
	classpath = sourceSets.main.compileClasspath
	options.compilerArgs += ["-Xlint:${lint.join(",")}"]

	dependsOn generateJavaSources
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.incremental = true
}

build.dependsOn shadowJar

shadowJar {
	archiveClassifier.set(null)
	exclude 'module-info.class'
}

class Version {
	String major, minor, revision

	String toString() {
		"${major}.${minor}.${revision}"
	}
}